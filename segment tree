#include <bits/stdc++.h>
using namespace std;
void buildTree (int *arr,int *tree,int start,int end,int treeidx){
    if (start==end){
        tree[treeidx]=arr[start];
        return;
    }
    int mid =(start+end)/2;
    buildTree(arr,tree,start,mid,2*treeidx);
    buildTree(arr,tree,mid+1,end,2*treeidx+1);
    tree[treeidx]=min(tree[2*treeidx],tree[2*treeidx+1]);
    
}
void updatesegmenttreelazy (int *lazy,int *tree,int start ,int end,int si,int ei,int curpos,int inc){
    if (start>end){
        return ;
    }
    if (lazy[curpos]!=0){
        tree[curpos]+=lazy[curpos];
        
    }
    if (start!=end){
    lazy[2*curpos]+=lazy[curpos];
    lazy[2*curpos+1]+=lazy[curpos];
        
    }
    lazy[curpos]=0;
    
    // query completely outside
    if (si>end or ei<start)return;
    // completely inside

    if (si<=start and end<=ei){
        tree[curpos]+=inc;
        if (start!=end){
            lazy[2*curpos]+=inc;
            lazy[2*curpos+1]+=inc;
        }
        return;
    }
    //partial overlap
    int mid = (start+end)/2;
    updatesegmenttreelazy(lazy,tree,start,mid,si,ei,2*curpos,inc);
    updatesegmenttreelazy(lazy,tree,mid+1,end,si,ei,2*curpos+1,inc);
    tree[curpos]=min(tree[2*curpos],tree[2*curpos+1]);
}
int main() {
	int n;cin>>n;
	int arr[]={1,3,-2,4};
//	int arr[n];for (int i=0;i<n;i++)cin>>arr[i];
	int *tree = new int[12]();// array tree of n size and initialize it with 0
	buildTree(arr,tree,0,n-1,1);
	int *lazy =new int [12]();// array lazy of n size and initialize it with 0
	
	updatesegmenttreelazy(lazy,tree,0,n-1,0,3,1,3);//increase element by 3 in range 0 to 3
	updatesegmenttreelazy(lazy,tree,0,n-1,0,1,1,2);// increase element by 2 in range 0 to 1
	
	cout<<"segemnt tree"<<endl;
	for (int i=1;i<4*n;i++){
	    cout<<tree[i]<<endl;
	}
	
	cout<<"lazy tree"<<endl;
	for (int i=1;i<4*n;i++){
	    cout<<lazy[i]<<endl;
	}
	return 0;
}
